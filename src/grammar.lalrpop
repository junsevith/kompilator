


grammar;


match {
    r"#.*\n" => {},

    "PROCEDURE",
    "IS",
    "BEGIN",
    "END",
    "PROGRAM",
    "IF",
    "THEN",
    "ELSE",
    "ENDIF",
    "WHILE",
    "DO",
    "ENDWHILE",
    "REPEAT",
    "UNTIL",
    "FOR",
    "FROM",
    "TO",
    "DOWNTO",
    "ENDFOR",
    "READ",
    "WRITE",

    ";",
    "(",
    ")",
    ",",
    ":",
    "[",
    "]",
    "T",

    "+",
    "-",
    "*",
    "/",
    "%",

    "=",
    "!=",
    ">",
    "<",
    ">=",
    "<=",
    ":="
} else {
    r"[_a-z]+" => PIDENTIFIER,
    r"[0-9]+" => NUM
}

pub program_all: () = {
    procedures main
}

procedures: () = {
    procedures "PROCEDURE" proc_head "IS" declarations "BEGIN" commands "END",
    procedures "PROCEDURE" proc_head "IS" "BEGIN" commands "END"
}

main: () = {
    "PROGRAM" "IS" declarations "BEGIN" commands "END",
    "PROGRAM" "IS" "BEGIN" commands "END"
}

commands: () = {
    commands command,
    command
}

command: () = {
    identifier ":=" expression ";",
    "IF" condition "THEN" commands "ELSE" commands "ENDIF",
    "IF" condition "THEN" commands "ENDIF",
    "WHILE" condition "DO" commands "ENDWHILE",
    "REPEAT" commands "UNTIL" condition ";",
    "FOR" PIDENTIFIER "FROM" value "TO" value "DO" commands "ENDFOR",
    "FOR" PIDENTIFIER "FROM" value "DOWNTO" value "DO" commands "ENDFOR",
    proc_call ";",
    "READ" identifier ";",
    "WRITE" value ";"
}

proc_head: () = {
    PIDENTIFIER "(" args_decl ")"
}

proc_call: () = {
    PIDENTIFIER "(" args ")"
}

declarations: () = {
    declarations "," PIDENTIFIER,
    declarations "," PIDENTIFIER "[" NUM ":" NUM "]",
    PIDENTIFIER,
    PIDENTIFIER "[" NUM ":" NUM "]"
}

args_decl: () = {
    args_decl "," PIDENTIFIER,
    args_decl "," "T" PIDENTIFIER,
    PIDENTIFIER,
    "T" PIDENTIFIER
}

args: () = {
    args "," PIDENTIFIER,
    PIDENTIFIER
}

expression: () = {
    value,
    value "+" value,
    value "-" value,
    value "*" value,
    value "/" value,
    value "%" value
}

condition: () = {
    value "=" value,
    value "!=" value,
    value ">" value,
    value "<" value,
    value ">=" value,
    value "<=" value
}

value: () = {
    NUM,
    identifier
}

identifier: () = {
    PIDENTIFIER,
    PIDENTIFIER "[" PIDENTIFIER "]",
    PIDENTIFIER "[" NUM "]"

}