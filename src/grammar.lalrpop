use crate::structure::*;
use std::format;
use std::vec;
use std::str::FromStr;

grammar;


match {
    r"#.*\n" => {},
    r"[ \t\n\r]+" => {},

    "PROCEDURE",
    "IS",
    "BEGIN",
    "END",
    "PROGRAM",
    "IF",
    "THEN",
    "ELSE",
    "ENDIF",
    "WHILE",
    "DO",
    "ENDWHILE",
    "REPEAT",
    "UNTIL",
    "FOR",
    "FROM",
    "TO",
    "DOWNTO",
    "ENDFOR",
    "READ",
    "WRITE",

    ";",
    "(",
    ")",
    ",",
    ":",
    "[",
    "]",
    "T",

    "+",
    "-",
    "*",
    "/",
    "%",

    "=",
    "!=",
    ">",
    "<",
    ">=",
    "<=",
    ":="
} else {
    r"[_a-z]+" => PIDENTIFIER,
    r"[0-9]+" => INT,

}

pub program_all: Program = {
    <p:procedures> <m:main> => Program {
        procedures: p,
        declarations: m.0,
        commands: m.1
    }
}

procedures: Vec<Procedure> = {
    <vec:procedures> "PROCEDURE" <head:proc_head> "IS" <decl:declarations> "BEGIN" <com:commands> "END" => {
        let mut v = vec;
        v.push(Procedure {
            name: head.0,
            arguments: head.1,
            declarations: decl,
            commands: com
        });
        v
    },
    <vec:procedures> "PROCEDURE" <head:proc_head> "IS" "BEGIN" <com:commands> "END" => {
        let mut v = vec;
        v.push(Procedure {
            name: head.0,
            arguments: head.1,
            declarations: Vec::new(),
            commands: com
        });
        v
    },
    () => Vec::new()
}

main: (Vec<Declaration>, Vec<Command>) = {
    "PROGRAM" "IS" <d:declarations> "BEGIN" <c:commands> "END" => {
        (d, c)
    },
    "PROGRAM" "IS" "BEGIN" <c:commands> "END" => {
        (Vec::new(), c)
    }
}

commands: Vec<Command> = {
    <vec:commands> <c:command> => {
        let mut v = vec;
        v.push(c);
        v
    },
    command => {
        let mut v = Vec::new();
        v.push(<>);
        v
    }
}

command: Command = {
    <i:identifier> ":=" <e:expression> ";" => Command::Assign(i, e),
    "IF" <cond:condition> "THEN" <com:commands> "ELSE" <com2:commands> "ENDIF" => Command::IfElse(cond, com, com2),
    "IF" <cond:condition> "THEN" <com:commands> "ENDIF" => Command::If(cond, com),
    "WHILE" <cond:condition> "DO" <com:commands> "ENDWHILE" => Command::While(cond, com),
    "REPEAT" <com:commands> "UNTIL" <cond:condition> ";" => Command::Repeat(cond, com),
    "FOR" <var:PIDENTIFIER> "FROM" <from:value> "TO" <to:value> "DO" <com:commands> "ENDFOR" => Command::For(var.to_string(), from, to, com),
    "FOR" <var:PIDENTIFIER> "FROM" <from:value> "DOWNTO" <to:value> "DO" <com:commands> "ENDFOR" => Command::ForDown(var.to_string(), from, to, com),
    <c:proc_call> ";" => c,
    "READ" <i:identifier> ";" => Command::Read(i),
    "WRITE" <v:value> ";" => Command::Write(v)
}

proc_head: (String, Vec<ArgumentDecl>) = {
    <p:PIDENTIFIER> "(" <a:args_decl> ")" => {
        (p.to_string(), a)
    }
}

proc_call: Command = {
    <p:PIDENTIFIER> "(" <args:args> ")" => Command::FunctionCall(p.to_string(), args )
}

declarations: Vec<Declaration> = {
    <vec:declarations> "," <p:PIDENTIFIER> => {
        let mut v = vec;
        v.push(Declaration::VariableDecl(p.to_string()));
        v
    },
    <vec:declarations> "," <p:PIDENTIFIER> "[" <n1:NUM> ":" <n2:NUM> "]" => {
        let mut v = vec;
        v.push(Declaration::ArrayDecl(p.to_string(), n1, n2));
        v
    },
    <p:PIDENTIFIER> => {
        vec![Declaration::VariableDecl(p.to_string())]
    },
    <p:PIDENTIFIER> "[" <n1:NUM> ":" <n2:NUM> "]" => {
        vec![Declaration::ArrayDecl(p.to_string(), n1, n2)]
    }
}

args_decl: Vec<ArgumentDecl> = {
    <vec:args_decl> "," <p:PIDENTIFIER> => {
        let mut v = vec;
        v.push(ArgumentDecl::VariableArg(p.to_string()));
        v
    },
    <vec:args_decl> "," "T" <p:PIDENTIFIER> => {
        let mut v = vec;
        v.push(ArgumentDecl::ArrayArg(p.to_string()));
        v
    },
    <p:PIDENTIFIER> => {
       vec![ArgumentDecl::VariableArg(p.to_string())]
    },
    "T" <p:PIDENTIFIER> => {
        vec![ArgumentDecl::ArrayArg(p.to_string())]
    }

}

args: Vec<String> = {
    <vec:args> "," <p:PIDENTIFIER> => {
        let mut v = vec;
        v.push(p.to_string());
        v
    },
    PIDENTIFIER => {
        vec![<>.to_string()]
    }
 }

expression: Operation = {
    value => Operation{operator: Operator::Value, left: <>, right: Value::Literal(0)},
    <v1:value> "+" <v2:value> => Operation{operator: Operator::Add, left: v1, right: v2},
    <v1:value> "-" <v2:value> => Operation{operator: Operator::Subtract, left: v1, right: v2},
    <v1:value> "*" <v2:value> => Operation{operator: Operator::Multiply, left: v1, right: v2},
    <v1:value> "/" <v2:value> => Operation{operator: Operator::Divide, left: v1, right: v2},
    <v1:value> "%" <v2:value> => Operation{operator: Operator::Modulo, left: v1, right: v2}
}

condition: Condition = {
    <v1:value> "=" <v2:value> => Condition{operator: ConditionOperator::Equal, left: v1, right: v2},
    <v1:value> "!=" <v2:value> => Condition{operator: ConditionOperator::NotEqual, left: v1, right: v2},
    <v1:value> ">" <v2:value> => Condition{operator: ConditionOperator::Greater, left: v1, right: v2},
    <v1:value> "<" <v2:value> => Condition{operator: ConditionOperator::Lesser, left: v1, right: v2},
    <v1:value> ">=" <v2:value> => Condition{operator: ConditionOperator::GreaterEqual, left: v1, right: v2},
    <v1:value> "<=" <v2:value> => Condition{operator: ConditionOperator::LesserEqual, left: v1, right: v2}
}

value: Value = {
    NUM => Value::Literal(<>),
    identifier => Value::Identifier(<>)
}

identifier: Identifier = {
    <p:PIDENTIFIER> => {
        Identifier::Variable(p.to_string())
    },
    <p:PIDENTIFIER> "[" <i:PIDENTIFIER> "]" => {
        Identifier::ArrayVar(p.to_string(), i.to_string())
    },
    <p:PIDENTIFIER> "[" <i:NUM> "]" => {
        Identifier::ArrayLit(p.to_string(), i)
    }
}


NUM: i64 = {
    INT => {
        i64::from_str(<>).unwrap()
    },
    "-" <i:INT> => {
        -i64::from_str(i).unwrap()
    }
}